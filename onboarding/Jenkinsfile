

podTemplate(label: 'OnboardingWorkflow', containers: [
    containerTemplate(name: 'jnlp', image: 'quay.io/samsung_cnct/custom-jnlp:0.1', args: '${computer.jnlpmac} ${computer.name}'),
    containerTemplate(name: 'technical-on-boarding', image: 'docker.io/library/golang:1.8', ttyEnabled: true, command: 'cat', alwaysPullImage: true, resourceRequestMemory: '128Mi', resourceLimitMemory: '1Gi'),
    containerTemplate(name: 'k2-tools', image: 'quay.io/samsung_cnct/k2-tools:latest', ttyEnabled: true, command: 'cat', alwaysPullImage: true, resourceRequestMemory: '1Gi', resourceLimitMemory: '1Gi')
  ]){

    node('OnboardingWorkflow') {
        customContainer('k2-tools') {

            customContainer ('technical-on-boarding') {
                stage('checkout') {
                    checkout scm

                    // Ugly hack. The code must live in a path compatible with Golang's layout.
                    kubesh "pwd && echo Workspace: ${WORKSPACE} && mkdir -p go/src/github.com/samsung-cnct/technical-on-boarding/ && cp -r ./onboarding go/src/github.com/samsung-cnct/technical-on-boarding/onboarding"

                    // THIS FAILS because it doesn't check out the correct branch.
                    // checkout([
                    //     $class: 'GitSCM', 
                    //     branches: [[name: '**']], 
                    //     doGenerateSubmoduleConfigurations: false, 
                    //     extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'go/src/github.com/samsung-cnct/technical-on-boarding/']], 
                    //     submoduleCfg: [], 
                    //     userRemoteConfigs: [[credentialsId: 'coffeepac', url: 'https://github.com/samsung-cnct/technical-on-boarding.git']]
                    // ])
                    // sh "echo Checked Out ${BRANCH_NAME}"
                }

                withEnv(["GOPATH=${WORKSPACE}/go/", "CHECKOUT_PATH=./go/src/github.com/samsung-cnct/technical-on-boarding"]){
                    stage('docker env setup') {
                        kubesh 'apt-get -qq update && apt-get -qq -y install build-essential'
                    }

                    stage('lint'){
                        kubesh 'pwd && ls -alh ./go/src/github.com/samsung-cnct/technical-on-boarding/ && make -C ./go/src/github.com/samsung-cnct/technical-on-boarding/onboarding lint'
                    }

                    stage('dependencies'){
                        kubesh 'make -C ./go/src/github.com/samsung-cnct/technical-on-boarding/onboarding deps'
                    }

                    stage('test'){
                        kubesh 'make -C ./go/src/github.com/samsung-cnct/technical-on-boarding/onboarding test'
                    }

                    stage('build'){
                        kubesh 'make -C ./go/src/github.com/samsung-cnct/technical-on-boarding/onboarding build'
                    }
                }

            }
        }    
    }
  }



def kubesh(command) {
  if (env.CONTAINER_NAME) {
    if ((command instanceof String) || (command instanceof GString)) {
      command = kubectl(command)
    }

    if (command instanceof LinkedHashMap) {
      command["script"] = kubectl(command["script"])
    }
  }

  sh(command)
}

def kubectl(command) {
  "kubectl exec -i ${env.HOSTNAME} -c ${env.CONTAINER_NAME} -- /bin/sh -c 'cd ${env.WORKSPACE} && export GOPATH=${env.GOPATH} CHECKOUT_PATH=${env.CHECKOUT_PATH} && ${command}'"
}

def customContainer(String name, Closure body) {
  withEnv(["CONTAINER_NAME=$name"]) {
    body()
  }
}
